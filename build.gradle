plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id ("de.jjohannes.extra-java-module-info") version "0.15"
    id "org.checkerframework" version "0.6.15" //https://github.com/kelloggm/checkerframework-gradle-plugin
}
apply from: 'https://raw.githubusercontent.com/Infomaximum/platform-java-module-info/0.0.8/com.infomaximum.platform-java-module-info.gradle'
if (project.hasProperty('ossrhUsername')) {
    apply from: 'publish.gradle'
}

group 'com.infomaximum'
version '1.1.2p1'

ext.moduleName = 'com.infomaximum.network'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

sourceSets {
    main {
        java.srcDir 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
    testintegration {
        java.srcDir 'src/testintegration/java'
        resources.srcDir 'src/testintegration/resources'
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
    testperformance {
        java.srcDir 'src/testperformance/java'
        resources.srcDir 'src/testperformance/resources'
        compileClasspath += sourceSets.main.output + sourceSets.test.output + testintegration.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output + testintegration.output
    }
}

configurations {
    testintegrationImplementation.extendsFrom(testImplementation)
    testintegrationRuntimeOnly.extendsFrom(testRuntimeOnly)
    testperformanceImplementation.extendsFrom(testintegrationImplementation)
    testperformanceRuntimeOnly.extendsFrom(testintegrationRuntimeOnly)
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/libs-milestone/" }
}

dependencies {
    api 'org.eclipse.jetty:jetty-server:11.0.11'
    implementation 'org.eclipse.jetty:jetty-webapp:11.0.11'

    implementation 'org.eclipse.jetty:apache-jsp:11.0.11'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'

    implementation 'org.eclipse.jetty.websocket:websocket-jetty-server:11.0.11'
    api 'org.eclipse.jetty.websocket:websocket-jetty-api:11.0.11'
    implementation 'org.eclipse.jetty.websocket:websocket-servlet:11.0.11'

    api 'org.springframework:spring-core:6.0.0-M5'
    api 'org.springframework:spring-web:6.0.0-M5'
    api 'org.springframework:spring-webmvc:6.0.0-M5'
    implementation 'org.springframework:spring-context-support:6.0.0-M5'
    implementation 'org.springframework:spring-messaging:6.0.0-M5'

    implementation 'net.minidev:json-smart:2.4.8'

    implementation('org.reflections:reflections:0.10.2') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    implementation 'org.slf4j:slf4j-api:2.0.0-beta1'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'ch.qos.logback:logback-core:1.3.0-beta0'
    testImplementation 'ch.qos.logback:logback-classic:1.3.0-beta0'

    testintegrationImplementation 'org.springframework:spring-test:6.0.0-M5'
    testintegrationImplementation 'org.eclipse.jetty.websocket:websocket-jetty-client:11.0.11'
}

task testintegration(type: Test, description: 'Integration test', group: 'Verification') {
    outputs.upToDateWhen { false }
}

task testperformance(type: Test, description: 'Performance test', group: 'Verification') {
    outputs.upToDateWhen { false }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }